pbinom(55,size = 100,0.5, lower.tail = false)
pbinom(55,size = 100,0.5, lower.tail = FALSE)
rm(list=ls())
m1<-520
m2<-15800/365
m2<-15800/3
m2<-15800/30
ppois(m2-1,m1,lower.tail = FALSE)
str(boxplot)
summary(boxplot)
?boxplot
library(usingR)
library("usingR")
install.packages("usingR")
install.packages("UsingR")
library("UsingR")
data(father.son)
father.son
names(father.son)
boxlplot(father.son$fheight)
boxplot(father.son$fheight)
hist(father.son$sheight)
hist(father.son$sheight,col="pink")
rug(father.son$sheight)
rug(father.son$sheight,col="orange")
boxplot(father.son$fheight)
boxplot(father.son$fheight,col="red")
abline(h=60)
abline(h=66)
?abline
boxplot(father.son$fheight,col="red")
abline(a=10,b=20,h=70)
abline(a=10,b=20,h=70,v=20)
abline(v=20)
boxplot(father.son$fheight,col="red")
hist(father.son$fheight)
hist(father.son$fheight,color="blue")
hist(father.son$fheight,col="blue")
hist(father.son$fheight,col="blue",breaks = 50)
hist(father.son$fheight,col="blue",breaks = 500)
rug(father.son$fheight)
rug(father.son$sheight,col="orange")
data(chicken)
?chicken
table(chicken)
?table
str(chicken)
data(five.yr.temperature)
str(five.yr.temperature)
table(five.yr.temperature)
table(five.yr.temperature$years)
View(five.yr.temperature)
with(five.yr.temperature, plot(year,temps))
with(five.yr.temperature, plot(five.yr.temperature$year,five.yr.temperature$temps))
with(five.yr.temperature, plot(five.yr.temperature$days,five.yr.temperature$temps))
rm(list=ls())
X = seq(1, 100, 5)
Y = seq (1, 100, 5)
Z = rnorm (length (X), 10, 2)
data1 <- data.frame (X, Y, )
data2 <- data.frame (X, Y, Z1 = Z - 5)
data3 <- data.frame (X, Y, Z1 = Z - 3)
X = seq(1, 100, 5)
Y = seq (1, 100, 5)
Z = rnorm (length (X), 10, 2)
data1 <- data.frame (X, Y, )
X = seq(1, 100, 5)
Y = seq (1, 100, 5)
Z = rnorm (length (X), 10, 2)
X = seq(1, 100, 5)
Y = seq (1, 100, 5)
Z = rnorm (length (X), 10, 2)
data1 <- data.frame (X, Y, )
data2 <- data.frame (X, Y, Z1 = Z - 5)
data3 <- data.frame (X, Y, Z1 = Z - 3)
data1 <- data.frame (X, Y, )
?require
library(datasets)
data(cars)
with(cars, plot(speed,dist))
?mnipulate
library(manipulate)
?manipulate
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
?lm
?I
?downlad.file
?download.file
library("xlsx")
install.packages("rJava")
library("xlsx")
geom_smooth
str(g)
class(g)
summary(g)
?I
?attr
rm(list=ls)
rm(list=ls())
clid<-"47c479256b0740cb43a8"
secret<-"d6bacaed5bc3174750516b2eb3b3f39f52006cfd"
library("httr")
?httr
myapp=oauth_app("github",clid,secret)
github_token<-oauth2.0_token(oauth_endpoint("github",myapp))
github_token<-oauth2.0_token(oauth_endpoint("github"),myapp)
github_token<-oauth2.0_token(oauth_endpoint("github",authorize = ),myapp)
myapp=oauth_app("github",clid)
clid
secret
myapp=oauth_app("github",clid)
myapp=oauth_app("github",clid, secret = secret)
myapp=oauth_app("github",clid, secret = secret)
library(httr)
oauth_endpoints("github")
myapp<-oauth_app("github",secret)
sec<-"d6bacaed5bc3174750516b2eb3b3f39f52006cfd"
myapp<-oauth_app("github",sec)
myapp<-oauth_app("github",clid)
myapp<-oauth_app("github",key=clid,secret=sec)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
?config
gtoken<-config(token=github_token)
req<-GET("https://api.github.com/users/jtleek/repos", gtoken)
?stop_for_status
stop_for_status(req)
req<-with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
rm(list=ls())
exit()
quit()
library("httr")
id<-"47c479256b0740cb43a8"
sec<-"d6bacaed5bc3174750516b2eb3b3f39f52006cfd"
?oauth_endpoints
oauth_endpoints("github")
myapp<-oauth_app("github",key=id,secret = sec)
myapp
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
github_token
str(github_token)
gtoken<-config(token=github_token)
gtoken
req<-GET("httpsL//api.github.com/rate_limit",gtoken)
req<-GET("https//api.github.com/rate_limit",gtoken)
req<-GET("https://api.github.com/rate_limit",gtoken)
req
stop_for_status(req)
req<-with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
install.packages("sqldf")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",dest="tmp.csv")
req<-with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
rm(list=ls())
oauth_endpoints("github")
myapp<-oauth_app("github",key=id,secret = sec)
id<-"47c479256b0740cb43a8"
sec<-"d6bacaed5bc3174750516b2eb3b3f39f52006cfd"
myapp<-oauth_app("github",key=id,secret = sec)
github_token<-oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken<-config(token=github_token)
req<-GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
?sqldf
library("sqldf")
?sqldf
acs<-csv.read("tmp.csv")
acs<-read.csv("tmp.csv")
str(acs)
sqldf("Select top 1 * from acs")
sqldf("Select * from acs")
sqldf("select pwgtp1 from acs where AGEP<50")
sqldf("select pwgtp1, AGEP from acs where AGEP<50")
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
con=url("http://biostat.jhsph.edu/~jleek/contact.html ")
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
lines<-readLines(con)
dim(lines)
lines
lines[50,]
length(lines)
library(XML)
install.packages("XML")
library(httr)
html2=GET("http://biostat.jhsph.edu/~jleek/contact.html")
content2=content(html2, as="text")
parsedHTML<-htmlParse(content2, asText=T)
library(XML)
library(httr)
lines<-readLines(con("http://biostat.jhsph.edu/~jleek/contact.html"))
lines<-readLines(url("http://biostat.jhsph.edu/~jleek/contact.html"))
dim(lines)
dim(lines)
str(lines)
lines[1]
nchar(lines[10])
nchar(lines[20])
nchar(lines[c(10,20,30,100)])
nchar(lines[30])
con.close
con()
str(con)
rm(list=ls())
dat<-read.fwf(url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
)
dat<-read.fwf(url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),widths = 9)
dat
dat<-read.fwf(url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),widths = 62)
str(dat)
dat<-read.fwf(url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),widths = 62, sep = " ")
dat<-read.fwf(url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),skip=4, widths = c(12,7,4,9,4,9,4,9,4))
dat
str(date)
str(dat)
dat<-read.fwf(url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),skip=4, widths = c(12,7,4,9,4,9,4,9,4), header = T)
dat<-read.fwf(url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),skip=3, widths = c(12,7,4,9,4,9,4,9,4), header = T)
dat<-read.fwf(url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),skip=4, widths = c(12,7,4,9,4,9,4,9,4))
dat
head(dat)
dat[,4]
sum(dat[,4]))
?rsum
colSums(dat)
colSums(dat)
apply(dat,sum,2)
str(dat)
dat
dat[,1]
dat[,2]
dat[,3]
dat[,3]
dat[,4]
str(dat[,4])
as.vector(str(dat[,4]))
sum(as.vector(str(dat[,4])))
sum(dat[,4])
library("swirl")
rm(list=ls())
swirl()
install_from_swirl("Regression_Models")
install_from_swirl("Statistical_Inference")
install_from_swirl("Getting_and_Cleaning_Data")
install_from_swirl("Exploratory_Data_Analysis")
swirl()
play()
str(galton)
nxt()
plot(child~parent, galton)
play()
?jitter
nxt()
plot(jitter(child,4)~parent, galton)
regrline<-lm(child~parent, galton)
abline(regrline, lwd=3, col="red")
summary(regrline)
?pnorm
?qnorm(0.95)
qnorm(0.95)
rnorm(100)
?qnorm
qnorm(0.975)
qnorm(0.95)
qnorm(0.95, lower.tail = F)
qnorm(0.95, lower.tail = T)
dist<-qnorm(10000)
dist<-rnorm(10000)
pnorm(dist)
qnorm(dist)
swirl()
library(swirl)
swirl()
lm(child~parent,galton)
fit<-lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$p)
cov(fit$residuals, galton$parent)
ols.ic<-fit$coef
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varchild<-var(galton$child)
varChild<-var(galton$child)
var(fit$residuals)
varRes<-var(fit$residuals)
varEst<-est(ols.slope,ols.ic)
varEst<-var(est(ols.slope,ols.ic))
all.equal(varChild, (varRes+varEst))
all.equal(varChild, varEst+varRes)
View(attenu)
efit<-lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
exit()
exit
quit()
rm(list=ls())
getwd()
library(usingR);data(diamond)
library(UsingR);data(diamond)
;
library(UsingR);data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit<-lm(y~x); summary(fit)$coefficients
plot(x, y, frame=FALSE,xlab="Carat",ylab="Dollars",pch=21,col="black", bg="lightblue", cex=2)
abline(fit, lwd=2)
xVals <- seq(min(x), max(x), by = .01);
str(xVals)
length(xVals)
dim(xVals)
length(x)
xVals<-data.frame(x=xVals)
p1<-predict(fit, xVals, interval="confidence")
p2<-predict(fit, xVals, interval="prediction")
dim(p1)
head(p1)
summary(p1)
summary(p1)$coefficients
mean(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
fit<-(lm(y~x))
sum(summary(fit)$residuals^2)
fit5<-lm(y ~ 1)
fit6<-lm(y ~ x - 1)
plot(x,y)
abline(fit,col="red")
abline(fit5,col="blue")
abline(fit6, col="yellow")
abline(fit6, col="black")
c(sum(resid(fit)),sum(resid(fit5)),sum(resid(fit6)))
data(diamonds)
diamonds[1,1]
View(diamonds)
fitd<-lm(price,carat,data=diamonds)
fitd<-lm(price~carat,data=diamonds)
fitdOnlyIntercept<-lm(price~1, data=diamonds)
fitdOnlySlope<-lm(price~I(carat-mean(carat)),data=diamonds)
plot(carat,price, diamonds)
plot(carat~price, diamonds)
plot(price~carat, diamonds)
device.off()
plot.clear()
plot.new()
plot(price~carat, diamonds)
abline(fitd,col="black")
abline(fitd,col="black", lwd=3)
abline(fitdOnlyIntercept,col="blue", lwd=3)
abline(fitdOnlySlope, col="red",lwd=3)
sum(summary(fitd)$residuals)
sum(summary(fitdOnlyIntercept)$residuals)
sum(summary(fitdOnlySlope)$residuals)
sum((summary(fitd)$residuals)^2)
sum(summary(fitd)$residuals^2)
sum(summary(fitdOnlySlope)$residuals^2)
sum(summary(fitdOnlyIntercept)$residuals^2)
fit123<-lm(mpg~wt, data=mtcars);fitnoslope<-lm(mpg~1, data=mtcars)
fit123noslope<-lm(mpg~1, data=mtcars)
sum((summary(fit123)$residuals)^2)/sum((summary(fit123noslope)$residuals)^2)
ls()
rm(list=ls())
?mar
?par
getwd()
load("../courses/04_ExploratoryAnalysis/clusteringExample/data/samsungData.rda")
ls()
str(samsungData)
View(samsungData)
class(samsungData)
unique(samsungDat$activity)
unique(samsungData$activity)
?transform
unique(samsungData$activity)
str(samsungData)
names(samsungData)
head(samsungData)
names(samsungData)
?scale
?kmeans
install_version("stringr", version="0.6.2")
library(devtools)
library(rtools)
setwd("/media//tanveer/Windows8_OS/Users/Tanveer/Documents/DataScience/CourseRa/RProgramming/")
install.packages("devtools")
library(devtools)
install.packages("manipulate")
require("devtools")
require(devtools)
install.packages("devtools")
find.packages("devtools")
find.package("devtools")
install.packages("devtools")
install.packages("rversions")
remove.packages("XML")
install.packages("XML")
install.packages("devtools")
exit
quit
quit()
install.packages("manipulate")
require(devtools)
install.packages("devtools")
restart()
?shut
?exit
?quit
getwd()
install.packages("devtools")
library(devtools)
install_github("slidify","ramnathv")
install_github("ramnathv/slidifyLibraries")
library(shiny)
find.package("shiny")
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
?system
ls()
ls
ls()
list.files()
setwd("DevelopingDataProducts/")
ls
ls()
setwd("MpgPredictionPresentation/")
ls
ls()
list.files()
file.remove("index.md")
file.remove("index.Rmd")
author("MpgPrediction")
library("slidify")
require("slidify")
author("MpgPrediction")
getwd()
setwd("..")
ls
ls()
list.files()
file.remove("MpgPrediction/")
file.remove("MpgPrediction/assets//css")
setwd("/media/tanveer/Windows8_OS//Users/Tanveer/Documents/DataScience/CourseRa/RProgramming/DevelopingDataProducts/")
ls
author("MpgPrediction")
find.package("stringr")
remove.packages("stringr")
install_version("stringr",version = "0.6.2")
shiny::runApp('/media/tanveer/Windows8_OS/Users/Tanveer/Documents/DataScience/CourseRa/RProgramming/DevelopingDataProducts/Project')
install.packages("dplyr")
find.packages("lubridate")
find.package("lubridate")
